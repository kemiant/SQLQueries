--1
SELECT COUNT(LOAN_NUMBER) as number_of_loan, 
min(ORIGINAL_AMOUNT) as lowest_loan_amount,
max(ORIGINAL_AMOUNT) as highest_loan_amount
FROM Loans;

--2
SELECT e.FIRST_NAME, e.LAST_NAME, COUNT(l.LOAN_NUMBER) as loan_count,
ROUND(AVG(l.ORIGINAL_AMOUNT), 2) AS avg_original_loan_amount
FROM EMPLOYEE e LEFT JOIN
    LOANS l ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
GROUP BY e.LAST_NAME, e.EMPLOYEE_ID, e.FIRST_NAME
ORDER BY loan_count DESC;
    
--3
SELECT e.FIRST_NAME, e.LAST_NAME, COUNT(l.LOAN_NUMBER) as loan_count,
ROUND(AVG(l.ORIGINAL_AMOUNT), 2) AS avg_original_loan_amount,
(MAX(L.INTEREST_RATE)-MIN(L.INTEREST_RATE)) as RANGE_INT,
ROUND(AVG(L.INTEREST_RATE), 2) as AVG_INT
FROM EMPLOYEE e LEFT JOIN
    LOANS l ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
GROUP BY
    e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME
ORDER BY
    loan_count DESC, RANGE_INT DESC;
    
--4
SELECT m.FIRST_NAME, m.LAST_NAME, mp.PHONE_NUMBER,
SUM(l.ORIGINAL_AMOUNT) as total_loan_amount,
COUNT(LOAN_NUMBER) AS total_number_of_loan
FROM MEMBERS m JOIN MEMBER_PHONE mp ON m.MEMBER_ID = mp.MEMBER_ID
LEFT JOIN Loans l ON m.MEMBER_ID = l.MEMBER_ID
WHERE mp.PHONE_TYPE = 'P'
GROUP BY m.MEMBER_ID, m.FIRST_NAME, m.LAST_NAME, mp.PHONE_NUMBER
ORDER BY total_loan_amount DESC;

--5
SELECT m.FIRST_NAME, m.LAST_NAME, m.EMAIL_ADDRESS,
COUNT(t.TRANSACTION_ID) as transaction_count
FROM MEMBERS m JOIN LOANS l on m.MEMBER_ID = l.MEMBER_ID
LEFT JOIN 
    TRANSACTION_HISTORY t on l.LOAN_NUMBER = t.LOAN_NUMBER
GROUP BY
    m.MEMBER_ID, m.FIRST_NAME, m.LAST_NAME, m.EMAIL_ADDRESS
HAVING COUNT(t.TRANSACTION_ID) > 22
ORDER BY transaction_count DESC, m.FIRST_NAME ASC;
    
--6
SELECT m.FIRST_NAME, m.LAST_NAME, m.EMAIL_ADDRESS,
COUNT(t.TRANSACTION_ID) as transaction_count,
AVG(t.AMOUNT) as average_transaction_amount
FROM MEMBERS m JOIN LOANS l on m.MEMBER_ID = l.MEMBER_ID
LEFT JOIN 
    TRANSACTION_HISTORY t on l.LOAN_NUMBER = t.LOAN_NUMBER
GROUP BY
    m.MEMBER_ID, m.FIRST_NAME, m.LAST_NAME, m.EMAIL_ADDRESS
HAVING COUNT(t.TRANSACTION_ID) > 22 
AND AVG(t.AMOUNT) >= 700
ORDER BY transaction_count DESC, m.FIRST_NAME ASC;


--7
SELECT b.BRANCH_STATE, b.BRANCH_NAME,
COUNT(l.LOAN_NUMBER) AS total_loan_processed
FROM BRANCH b JOIN EMPLOYEE e ON b.BRANCH_ID = e.BRANCH_ID
JOIN LOANS l ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
GROUP BY ROLLUP(b.BRANCH_STATE, b.BRANCH_NAME);
    
    --The state that has the highest number of loans processed is
    --New York with around 43 loans.
    

--8
SELECT b.BRANCH_STATE, b.BRANCH_NAME,
SUM(l.ORIGINAL_AMOUNT) AS total_loan_amount
FROM BRANCH b JOIN EMPLOYEE e ON b.BRANCH_ID = e.BRANCH_ID
JOIN LOANS l ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
GROUP BY b.BRANCH_STATE, b.BRANCH_NAME
HAVING SUM(l.ORIGINAL_AMOUNT) > 2000000
ORDER BY total_loan_amount DESC;




--9
SELECT LOAN_NUMBER, ORIGINAL_AMOUNT
FROM LOANS
WHERE ORIGINAL_AMOUNT > (SELECT AVG(ORIGINAL_AMOUNT) FROM LOANS)
ORDER BY ORIGINAL_AMOUNT ASC;






--10
SELECT DISTINCT m.MEMBER_ID, m.LAST_NAME, m.FIRST_NAME
FROM MEMBERS m
WHERE m.MEMBER_ID IN (SELECT DISTINCT l.MEMBER_ID FROM LOANS l)
ORDER BY m.MEMBER_ID;





--11
--subquery to put into query
SELECT e.employee_id
FROM EMPLOYEE e LEFT OUTER JOIN LOANS l 
ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
WHERE l.EMPLOYEE_ID IS NULL;



--full query
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, e.EMAIL
FROM EMPLOYEE e
WHERE e.employee_id IN 
(SELECT e.employee_id
FROM EMPLOYEE e LEFT OUTER JOIN LOANS l ON e.EMPLOYEE_ID = l.EMPLOYEE_ID
WHERE l.EMPLOYEE_ID IS NULL);





--12

--subquery to put into query
SELECT m.EMAIL_ADDRESS, l.LOAN_NUMBER, SUM(t.AMOUNT) AS total_payment_amount
    FROM members m
    JOIN loans l ON m.MEMBER_ID = l.MEMBER_ID
    LEFT JOIN TRANSACTION_HISTORY t ON l.LOAN_NUMBER = t.LOAN_NUMBER
    GROUP BY m.EMAIL_ADDRESS, l.LOAN_NUMBER;
    

--full query
SELECT EMAIL_ADDRESS, MAX(total_payment_amount) AS max_payment_total
FROM (
    SELECT m.EMAIL_ADDRESS, l.LOAN_NUMBER, SUM(t.AMOUNT) AS total_payment_amount
    FROM members m
    JOIN loans l ON m.MEMBER_ID = l.MEMBER_ID
    LEFT JOIN TRANSACTION_HISTORY t ON l.LOAN_NUMBER = t.LOAN_NUMBER
    GROUP BY m.EMAIL_ADDRESS, l.LOAN_NUMBER
)
GROUP BY EMAIL_ADDRESS
ORDER BY EMAIL_ADDRESS;






--13

--subquery to put into query
   SELECT MEMBER_ID
    FROM MEMBER_ADDRESS_LINK
    GROUP BY MEMBER_ID
    HAVING COUNT(*) >= 3;
    
--full query
SELECT ma.MEMBER_ID, ma.ADDRESS_STATUS, a.ADDRESS_LINE_1, a.ADDRESS_LINE_2, a.CITY, a.MEMBER_STATE, a.ZIP_CODE
FROM MEMBER_ADDRESS_LINK ma
JOIN MEMBER_ADDRESS a ON ma.ADDRESS_ID = a.ADDRESS_ID
WHERE ma.MEMBER_ID IN (
    SELECT MEMBER_ID
    FROM MEMBER_ADDRESS_LINK
    GROUP BY MEMBER_ID
    HAVING COUNT(*) >= 3
)
ORDER BY ma.MEMBER_ID, ma.ADDRESS_STATUS;






--14

--subquery to put into query
  SELECT LOAN_NUMBER, MIN(TRANSACTION_DATE) AS transaction_start_date
    FROM TRANSACTION_HISTORY
    GROUP BY LOAN_NUMBER;

--full query
SELECT t.transaction_start_date, l.LOAN_NUMBER, l.ORIGINATION_DATE,l.ORIGINAL_AMOUNT
FROM MEMBERS m
JOIN LOANS l ON m.MEMBER_ID = l.MEMBER_ID
JOIN (
  SELECT LOAN_NUMBER, MIN(TRANSACTION_DATE) AS transaction_start_date
    FROM TRANSACTION_HISTORY
    GROUP BY LOAN_NUMBER
) t ON l.LOAN_NUMBER = t.LOAN_NUMBER
WHERE l.LOAN_STATUS = 'P'
ORDER BY t.transaction_start_date ASC, l.LOAN_NUMBER ASC;






